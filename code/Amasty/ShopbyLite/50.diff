diff --git a/Helper/Data.php b/Helper/Data.php
index e6e498adf5fa106a2e50b22d5fda546dc4add5ae..f1c62819d259447f1ade00b6b209a32c60f7cb83 100644
--- a/Helper/Data.php
+++ b/Helper/Data.php
@@ -6,6 +6,7 @@ use Magento\Catalog\Model\Layer;
 use Magento\Framework\App\Helper\Context;
 use Magento\Framework\App\Helper\AbstractHelper;
 use Magento\Store\Model\ScopeInterface;
+use Amasty\ShopbyLite\Model\Di\Wrapper;
 
 class Data extends AbstractHelper
 {
@@ -15,6 +16,7 @@ class Data extends AbstractHelper
     const CONFIG_GENERAL_SLIDER = 'general/enable_price_slider';
     const CONFIG_GENERAL_SLIDER_STEP = 'general/price_slider_step';
     const CONFIG_GENERAL_OWERFLOW_SCROLL = 'general/enable_overflow_scroll';
+    const AMBRAND_INDEX_INDEX = 'ambrand_index_index';
 
     const DEFAULT_SLIDER_STEP_VALUE = 1.0;
 
@@ -48,16 +50,23 @@ class Data extends AbstractHelper
      */
     private $layerResolver;
 
+    /**
+     * @var Wrapper
+     */
+    private $baseHelper;
+
     public function __construct(
         Context $context,
         Layer\Resolver $layerResolver,
         \Magento\Store\Model\StoreManagerInterface $storeManager,
-        \Magento\Framework\Registry $registry
+        \Magento\Framework\Registry $registry,
+        Wrapper $baseHelper
     ) {
         parent::__construct($context);
         $this->layerResolver = $layerResolver;
         $this->storeManager = $storeManager;
         $this->registry = $registry;
+        $this->baseHelper = $baseHelper;
     }
 
     /**
@@ -199,4 +208,28 @@ class Data extends AbstractHelper
     {
         return $this->getModuleConfig(self::CONFIG_GENERAL_OWERFLOW_SCROLL);
     }
+
+    /**
+     * @return \Magento\Framework\App\RequestInterface
+     */
+    public function getRequest()
+    {
+        return parent::_getRequest();
+    }
+
+    /**
+     * @return bool
+     */
+    public function isBrandPage()
+    {
+        return $this->getRequest()->getFullActionName() == self::AMBRAND_INDEX_INDEX;
+    }
+
+    /**
+     * @return string
+     */
+    public function getBrandAttributeCode()
+    {
+        return $this->baseHelper->getBrandAttributeCode();
+    }
 }
diff --git a/Model/Di/Wrapper.php b/Model/Di/Wrapper.php
new file mode 100644
index 0000000000000000000000000000000000000000..981e0a40e1995d75c699c19a7a6807d807426f84
--- /dev/null
+++ b/Model/Di/Wrapper.php
@@ -0,0 +1,139 @@
+<?php
+
+namespace Amasty\ShopbyLite\Model\Di;
+
+use Magento\Framework\Module\Manager;
+use Magento\Framework\ObjectManagerInterface;
+use Magento\Framework\ObjectManager\ConfigInterface as ObjectManagerMetaProvider;
+
+class Wrapper
+{
+    /**
+     * @var ObjectManagerInterface
+     */
+    private $objectManagerInterface;
+
+    /**
+     * @var string
+     */
+    private $name;
+
+    /**
+     * @var bool
+     */
+    private $getShared;
+
+    /**
+     * @var bool
+     */
+    private $isProxy;
+
+    /**
+     * @var object
+     */
+    private $subject;
+
+    /**
+     * @var Manager
+     */
+    private $moduleManager;
+
+    /**
+     * @var ObjectManagerMetaProvider
+     */
+    private $diMetaProvider;
+
+    public function __construct(
+        ObjectManagerInterface $objectManagerInterface,
+        Manager $moduleManager,
+        ObjectManagerMetaProvider $diMetaProvider,
+        $name = '',
+        $getShared = false,
+        $isProxy = false
+    ) {
+        $this->objectManagerInterface = $objectManagerInterface;
+        $this->moduleManager = $moduleManager;
+        $this->diMetaProvider = $diMetaProvider;
+        $this->name = $name;
+        $this->getShared = $getShared;
+        $this->isProxy = $isProxy;
+    }
+
+    // @codingStandardsIgnoreStart
+
+    /**
+     * @param string $name
+     * @param array arguments
+     * @return bool|mixed
+     */
+    public function __call($name, $arguments)
+    {
+        $result = false;
+
+        if ($this->canCreateObject()) {
+            $object = $this->getSubject();
+            $result = call_user_func_array([$object, $name], $arguments);
+        }
+
+        return $result;
+    }
+
+    /**
+     * @return object
+     */
+    public function getSubject()
+    {
+        if ($this->isProxy && $this->subject) {
+            return $this->subject;
+        }
+
+        if ($this->getShared) {
+            $object = $this->objectManagerInterface->get($this->name);
+        } else {
+            $object = $this->objectManagerInterface->create($this->name);
+        }
+
+        if ($this->isProxy) {
+            $this->subject = $object;
+        }
+
+        return $object;
+    }
+
+    // @codingStandardsIgnoreEnd
+
+    private function isVirtualType(string $class): bool
+    {
+        $type = $this->diMetaProvider->getInstanceType($class);
+
+        return $type !== $class;
+    }
+
+    private function canCreateObject(): bool
+    {
+        $canAutoload = (class_exists($this->name) || interface_exists($this->name))
+            && $this->moduleManager->isEnabled($this->getModuleName($this->name));
+        $canGetObjectByDI = $this->isVirtualType($this->name);
+
+        return $this->name && ($canAutoload || $canGetObjectByDI);
+    }
+
+    private function getModuleName(string $class): string
+    {
+        $class = ltrim($class, '\\');
+        $parts = preg_split('@[\\\_]@', $class);
+        $parts = array_filter($parts);
+
+        if (count($parts) < 2) {
+            throw new \InvalidArgumentException(
+                (string)__('Provided argument is not in PSR-0 or underscore notation.')
+            );
+        }
+
+        return sprintf(
+            '%1s_%2s',
+            ucfirst($parts[0]),
+            ucfirst($parts[1])
+        );
+    }
+}
diff --git a/Model/Layer/FilterList.php b/Model/Layer/FilterList.php
index f1e557f6d4ca1c49f6827bccf59a0aca8976484c..f0ad2cb055cabf85a91e6fd58db200edae725c1e 100644
--- a/Model/Layer/FilterList.php
+++ b/Model/Layer/FilterList.php
@@ -24,6 +24,11 @@ class FilterList extends \Magento\Catalog\Model\Layer\FilterList
      */
     private $shopbyRequest;
 
+    /**
+     * @var \Amasty\ShopbyLite\Helper\Data
+     */
+    private $data;
+
     public function __construct(
         \Magento\Framework\ObjectManagerInterface $objectManager,
         \Magento\Catalog\Model\Layer\FilterableAttributeListInterface $filterableAttributes,
@@ -31,14 +36,16 @@ class FilterList extends \Magento\Catalog\Model\Layer\FilterList
         \Magento\Framework\App\Request\Http $request,
         \Magento\Framework\Registry $registry,
         \Amasty\ShopbyLite\Model\Request $shopbyRequest,
+        \Amasty\ShopbyLite\Helper\Data $data,
         array $filters = []
     ) {
         $this->request = $request;
         $this->registry = $registry;
         $this->shopbyRequest = $shopbyRequest;
+        $this->data = $data;
 
         $version = str_replace(['-develop', 'dev-', '-beta'], '', $magentoVersion->get());
-        
+
         if (version_compare($version, '2.4.0', '>=')) {
             $params = [
                 $objectManager,
@@ -66,6 +73,12 @@ class FilterList extends \Magento\Catalog\Model\Layer\FilterList
         if (!$this->filtersLoaded) {
             $this->filters = $this->getAllFilters($layer);
             $this->filtersLoaded = true;
+        } else {
+            foreach ($this->filters as $key => $filter) {
+                if ($filter->getRequestVar() === $this->data->getBrandAttributeCode() && $this->data->isBrandPage()) {
+                    array_splice($this->filters, $key, 1);
+                }
+            }
         }
         return $this->filters;
     }
diff --git a/etc/frontend/di.xml b/etc/frontend/di.xml
index 8777610158db9032c6a0a2de484cd7c44c6fd5fd..a7687081a81afa82fd167e717f7eed7ffaa9f0c6 100644
--- a/etc/frontend/di.xml
+++ b/etc/frontend/di.xml
@@ -90,6 +90,18 @@
         </arguments>
     </type>
 
+    <virtualType name="Amasty\ShopbyLite\Helper\Base" type="Amasty\ShopbyLite\Model\Di\Wrapper">
+        <arguments>
+            <argument name="name" xsi:type="string">Amasty\ShopbyBase\Helper\Data</argument>
+        </arguments>
+    </virtualType>
+
+    <type name="Amasty\ShopbyLite\Helper\Data">
+        <arguments>
+            <argument name="baseHelper" xsi:type="object">Amasty\ShopbyLite\Helper\Base</argument>
+        </arguments>
+    </type>
+
     <type name="Magento\Framework\Search\Adapter\Mysql\Aggregation\Builder\Dynamic">
         <plugin name="Amasty_ShopbyLite::changeAggregationForSliders"
                 type="Amasty\ShopbyLite\Plugin\Framework\Search\Adapter\Mysql\Aggregation\Builder\Dynamic"/>
