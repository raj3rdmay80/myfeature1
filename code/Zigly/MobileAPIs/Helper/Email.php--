<?php
namespace Zigly\MobileAPIs\Helper;

use Magento\Framework\App\Helper\Context;
use Magento\Framework\Translate\Inline\StateInterface;
use Magento\Framework\Escaper;
use Zigly\MobileAPIs\Mail\TransportBuilder;
use Magento\MediaStorage\Model\File\UploaderFactory;
use Magento\Framework\Filesystem;
use Magento\Framework\App\Filesystem\DirectoryList;
use Magento\Framework\App\Config\ScopeConfigInterface;

class Email extends \Magento\Framework\App\Helper\AbstractHelper
{
    protected $inlineTranslation;
    protected $escaper;
    protected $transportBuilder;
    protected $logger;
	protected $uploaderFactory;
	protected $fileSystem;
	protected $scopeConfig;

    public function __construct(
        Context $context,
        StateInterface $inlineTranslation,
        Escaper $escaper,
        TransportBuilder $transportBuilder,
		\Magento\Framework\Api\Data\ImageContentInterface $imageContentInterface,
		UploaderFactory $uploaderFactory,
		Filesystem $fileSystem,
		ScopeConfigInterface $scopeConfig
    ) {
        parent::__construct($context);
        $this->inlineTranslation = $inlineTranslation;
        $this->escaper = $escaper;
        $this->transportBuilder = $transportBuilder;
        $this->logger = $context->getLogger();
		$this->_imageContentInterface = $imageContentInterface;
		$this->uploaderFactory = $uploaderFactory; 
		$this->fileSystem = $fileSystem;
		$this->mediaDirectory = $fileSystem->getDirectoryWrite(\Magento\Framework\App\Filesystem\DirectoryList::MEDIA);
		$this->scopeConfig = $scopeConfig;

    }

    public function sendEmail($customerEmail, $customerName, $fileData)
    {
        try {
			

            $this->inlineTranslation->suspend();
            $sender = [
                'name' => $this->scopeConfig->getValue('trans_email/ident_support/name',\Magento\Store\Model\ScopeInterface::SCOPE_STORE),
                'email' => $this->scopeConfig->getValue('trans_email/ident_support/email',\Magento\Store\Model\ScopeInterface::SCOPE_STORE),
            ];
            $transport = $this->transportBuilder
                ->setTemplateIdentifier('prescription_email')
                ->setTemplateOptions(
                    [
                        'area' => \Magento\Framework\App\Area::AREA_FRONTEND,
                        'store' => \Magento\Store\Model\Store::DEFAULT_STORE_ID,
                    ]
                )
                ->setTemplateVars([
                    'customerName'  => $customerName,
                ])
                ->setFrom($sender)
                ->addTo($customerEmail);
			foreach($fileData['prescription'] as $pages){
				$path = $this->fileuploader($pages);
				$transport->addAttachment(file_get_contents($path),$pages['name'],$pages['type']);

			}
			

			$transport = $this->transportBuilder->getTransport();
            $transport->sendMessage();
            $this->inlineTranslation->resume();
			return true;
        } catch (\Exception $e) {
            $this->logger->debug($e->getMessage());
			return false;
        }
    }
	public static function parseRequestParams($requestArray){
        $requestArray = json_decode($requestArray,true);
        $tmpArray = array();
        if(!empty($requestArray)){
            foreach($requestArray as $keys => $values){
                if(trim($keys) == 'defaultParameters'){
                   foreach($values as $defaultKeys => $defaultValues){
                        $tmpArray[$defaultKeys] = $defaultValues;
                   }
                }else{
                    $tmpArray[$keys] = $values;
                }
            }    
        }
        if(!empty($tmpArray)){
            $requestArray = $tmpArray;
        }
        return $requestArray;
    }
	public function fileuploader($pages){
		$uploader = $this->uploaderFactory->create(['fileId' => $pages]);
		$uploader->setFilesDispersion(false);
		$uploader->setFilenamesCaseSensitivity(false);
		$uploader->setAllowRenameFiles(true);
		$uploader->setAllowedExtensions(['pdf','pptx', 'xls', 'xlsx', 'flash', 'mp3', 'docx', 'doc', 'zip', 'jpg', 'jpeg', 'png', 'gif', 'ini', 'readme', 'avi', 'csv', 'txt', 'wma', 'mpg', 'flv', 'mp4']);
		$target = $this->mediaDirectory->getAbsolutePath('prescription/');    
		$result = $uploader->save($target);
		return $target.$result['name'];
	}
}